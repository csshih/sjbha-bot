// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Component = require("../discord/Component.bs.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");
var Meetup_Details = require("./Meetup_Details.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var ID = {
  details_modal: "meetup/create/details"
};

function makeForm(param) {
  return {
          started: new Date(),
          details: Meetup_Details.make(undefined),
          state: /* Main */0
        };
}

function validDate(date, time) {
  new Date(date);
  return {
          TAG: /* Ok */0,
          _0: new Date()
        };
}

function updateDetails(form, title, description, date, time) {
  var parsed = validDate(date, time);
  if (parsed.TAG === /* Ok */0) {
    return {
            started: form.started,
            details: {
              title: title,
              description: description,
              date: parsed._0.toISOString()
            },
            state: /* Main */0
          };
  }
  var init = form.details;
  return {
          started: form.started,
          details: {
            title: title,
            description: description,
            date: init.date
          },
          state: /* InputError */{
            error: "Invalid date",
            button_id: "meetup/create/edit-details"
          }
        };
}

function render(form) {
  var match = form.state;
  if (typeof match === "number") {
    if (match !== 0) {
      return {
              embeds: [{
                  description: "Oops"
                }],
              ephemeral: true
            };
    } else {
      return {
              embeds: [
                {
                  description: "This is a preview of your meetup"
                },
                Meetup_Details.render(form.details)
              ],
              components: [Component.row([Component.Button.make("Edit Details", /* Primary */0, "meetup/create/edit-details", undefined, undefined)])],
              ephemeral: true
            };
    }
  } else {
    return {
            embeds: [{
                title: "Input Error",
                description: match.error
              }],
            components: [Component.row([Component.Button.make("Open Modal", /* Primary */0, match.button_id, undefined, undefined)])],
            ephemeral: true
          };
  }
}

var title_id = "title";

var desc_id = "description";

var date_id = "date";

function make(form, param) {
  return {
          custom_id: "meetup/create/details",
          title: form !== undefined ? "Edit Meetup Details" : "Create a New Meetup",
          components: [
            Component.row([Component.TextInput.make("Meetup Title", title_id, /* Short */0, 6, undefined, undefined, Core__Option.map(form, (function (it) {
                              return it.details.title;
                            })), "Hapa's brewing", undefined)]),
            Component.row([Component.TextInput.make("Description", desc_id, /* Paragraph */1, undefined, undefined, undefined, Core__Option.map(form, (function (it) {
                              return it.details.description;
                            })), "Let others know when ", undefined)]),
            Component.row([Component.TextInput.make("Date", date_id, /* Short */0, undefined, 20, undefined, undefined, "m/d/yy like 6/3/23", undefined)])
          ]
        };
}

function getInput(modal) {
  return {
          title: modal.fields.getTextInputValue(title_id),
          description: modal.fields.getTextInputValue(desc_id),
          date: modal.fields.getTextInputValue(date_id)
        };
}

var DetailsModal = {
  title_id: title_id,
  desc_id: desc_id,
  date_id: date_id,
  make: make,
  getInput: getInput
};

var StateNotFound = /* @__PURE__ */Caml_exceptions.create("Meetup_Create.StateNotFound");

var in_progress = new Map();

function getStateExn(id) {
  var form = in_progress.get(id);
  if (form !== undefined) {
    return form;
  }
  throw {
        RE_EXN_ID: StateNotFound,
        Error: new Error()
      };
}

async function initializeNewMeetup(input) {
  return input.showModal(make(undefined, undefined));
}

async function onClickEditDetails(btn) {
  try {
    var form = getStateExn(btn.message.id);
    return await btn.showModal(make(form, undefined));
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === StateNotFound) {
      return await btn.reply({
                  content: "I think this is out of date",
                  ephemeral: true
                });
    }
    throw exn;
  }
}

async function onSubmitModalDetails(modal) {
  try {
    var message = modal.message;
    var form = (message == null) ? makeForm(undefined) : getStateExn(message.id);
    var input = getInput(modal);
    var next = updateDetails(form, input.title, input.description, input.date, "");
    var view = render(next);
    if (modal.isFromMessage()) {
      await modal.update(view);
    } else {
      await modal.reply(view);
    }
    var reply = await modal.fetchReply();
    in_progress.set(reply.id, next);
    return ;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === StateNotFound) {
      return await modal.reply({
                  content: "I think this is out of date",
                  ephemeral: true
                });
    }
    throw exn;
  }
}

var embedFail = {
  description: "Doesn't look like there's a message"
};

exports.ID = ID;
exports.makeForm = makeForm;
exports.validDate = validDate;
exports.updateDetails = updateDetails;
exports.embedFail = embedFail;
exports.render = render;
exports.DetailsModal = DetailsModal;
exports.StateNotFound = StateNotFound;
exports.in_progress = in_progress;
exports.getStateExn = getStateExn;
exports.initializeNewMeetup = initializeNewMeetup;
exports.onClickEditDetails = onClickEditDetails;
exports.onSubmitModalDetails = onSubmitModalDetails;
/* in_progress Not a pure module */
