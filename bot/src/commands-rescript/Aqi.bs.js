// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var StdLib = require("../common/StdLib.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var SuperAgent = require("../common/SuperAgent.bs.js");
var DiscordJs = require("discord.js");
var Superagent = require("superagent");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Convert = require("@shootismoke/convert");

function make(id, $$location) {
  return {
          id: id,
          location: $$location
        };
}

var downtown = "Downtown San Jose";

var eastSanJose = "East San Jose";

var southSanJose = "South San Jose";

var santaClara = "Santa Clara";

var mountainView = "Mountain View";

var sanMateo = "San Mateo";

var locations = [
  downtown,
  eastSanJose,
  southSanJose,
  santaClara,
  mountainView,
  sanMateo
];

var items = [
  {
    id: "56013",
    location: downtown
  },
  {
    id: "64381",
    location: downtown
  },
  {
    id: "20757",
    location: eastSanJose
  },
  {
    id: "64881",
    location: eastSanJose
  },
  {
    id: "56007",
    location: eastSanJose
  },
  {
    id: "15245",
    location: southSanJose
  },
  {
    id: "54205",
    location: southSanJose
  },
  {
    id: "19313",
    location: santaClara
  },
  {
    id: "70615",
    location: santaClara
  },
  {
    id: "60819",
    location: santaClara
  },
  {
    id: "38607",
    location: mountainView
  },
  {
    id: "62249",
    location: mountainView
  },
  {
    id: "60819",
    location: mountainView
  },
  {
    id: "60115",
    location: sanMateo
  },
  {
    id: "59143",
    location: sanMateo
  },
  {
    id: "67283",
    location: sanMateo
  }
];

function forLocation($$location) {
  return Belt_Array.keep(items, (function (s) {
                return s.location === $$location;
              }));
}

var Source = {
  make: make,
  downtown: downtown,
  eastSanJose: eastSanJose,
  southSanJose: southSanJose,
  santaClara: santaClara,
  mountainView: mountainView,
  sanMateo: sanMateo,
  locations: locations,
  items: items,
  forLocation: forLocation
};

function level(aqi) {
  if (aqi < 50) {
    return /* Good */0;
  } else if (aqi < 100) {
    return /* Sketchy */1;
  } else if (aqi < 150) {
    return /* Bad */2;
  } else {
    return /* Terrible */3;
  }
}

function fromPm25(pm25) {
  return Convert.convert("pm25", "raw", "usaEpa", pm25);
}

function average(aqis) {
  var sum = Belt_Array.reduce(aqis, 0, (function (a, b) {
          return a + b;
        }));
  var count = aqis.length;
  return sum / count;
}

var Aqi = {
  level: level,
  fromPm25: fromPm25,
  average: average
};

function id(sensor) {
  return Belt_Option.getWithDefault(sensor.ParentID, sensor.ID);
}

function decodeStats(sensor) {
  var json;
  try {
    json = JSON.parse(sensor.Stats);
  }
  catch (exn){
    return ;
  }
  return json;
}

function aqi(sensor) {
  return Belt_Option.map(decodeStats(sensor), (function (s) {
                return fromPm25(s.v1);
              }));
}

function $$fetch(ids) {
  return StdLib.P.map(SuperAgent.run(Superagent.get("https://www.purpleair.com/json").query({
                      show: Belt_Array.joinWith(ids, "|", (function (i) {
                              return i;
                            }))
                    })), (function (res) {
                var byId = {};
                Belt_Array.forEach(res.body.results, (function (sensor) {
                        var value = aqi(sensor);
                        if (value !== undefined) {
                          byId[id(sensor)] = value;
                          return ;
                        }
                        
                      }));
                return byId;
              }));
}

var Sensor = {
  id: id,
  decodeStats: decodeStats,
  aqi: aqi,
  $$fetch: $$fetch
};

function borderColor(aqi) {
  var match = level(aqi);
  switch (match) {
    case /* Good */0 :
        return 5564977;
    case /* Sketchy */1 :
        return 16644115;
    case /* Bad */2 :
        return 16354326;
    case /* Terrible */3 :
        return 13309719;
    
  }
}

function icon(aqi) {
  var match = level(aqi);
  switch (match) {
    case /* Good */0 :
        return "ðŸŸ¢";
    case /* Sketchy */1 :
        return "ðŸŸ¡";
    case /* Bad */2 :
        return "ðŸŸ ";
    case /* Terrible */3 :
        return "ðŸ”´";
    
  }
}

function aqiForLocation($$location, aqiById) {
  return average(Belt_Array.keepMap(forLocation($$location), (function (s) {
                    return Js_dict.get(aqiById, s.id);
                  })));
}

function make$1(aqiById) {
  var totalAqi = Math.round(average(Js_dict.values(aqiById)));
  return new DiscordJs.MessageEmbed().setTitle("Air Quality Index â€¢ " + totalAqi + " average").setColor(borderColor(totalAqi)).setDescription(StdLib.A.join(Curry._2(StdLib.A.map, locations, (function ($$location) {
                          var aqi = Math.round(aqiForLocation($$location, aqiById));
                          var emoji = icon(aqi);
                          return "" + emoji + " **" + $$location + "** " + aqi;
                        })), "\n")).setFooter("Based on a 10 minute average from [these Purple Air sensors](https://www.google.com)");
}

var Embed = {
  borderColor: borderColor,
  icon: icon,
  aqiForLocation: aqiForLocation,
  make: make$1
};

function post(msg) {
  return StdLib.P.run($$fetch(Curry._2(StdLib.A.map, items, (function (s) {
                        return s.id;
                      }))), (function (aqiById) {
                var embed = {
                  embeds: [make$1(aqiById)]
                };
                return StdLib.done(msg.channel.send(embed));
              }), (function (prim) {
                
              }));
}

exports.Source = Source;
exports.Aqi = Aqi;
exports.Sensor = Sensor;
exports.Embed = Embed;
exports.post = post;
/* StdLib Not a pure module */
